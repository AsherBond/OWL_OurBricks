/*
 * OurBricksJPanel.java
 *
 * Created on 26-Jul-2011, 11:29:03
 */

package org.jdesktop.wonderland.modules.ourbricks.client;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.jdesktop.wonderland.client.jme.dnd.FileListDataFlavorHandler;
import org.jdesktop.wonderland.modules.ourbricks.client.ourbricks.OurBrick;
import org.jdesktop.wonderland.modules.ourbricks.client.ourbricks.OurBricksCellRenderer;
import org.jdesktop.wonderland.modules.ourbricks.client.ourbricks.OurBricksList;
import org.jdesktop.wonderland.modules.ourbricks.client.ourbricks.OurBricksURLGateway;

/**
 *
 * @author jos
 */
public class OurBricksJPanel extends javax.swing.JPanel {

    private OurBricksList bricksList;
    private final OurBricksDataProvider dataProvider;
    public OurBrick[] bricks;
    private DefaultListModel listModel;

    /** Creates new form OurBricksJPanel */
    public OurBricksJPanel(OurBricksURLGateway gateway) {
        this.listModel = new DefaultListModel();
        initComponents();
        this.dataProvider = new OurBricksDataProvider(gateway);

        search(null, null);
        
    }

    private void search(String query, Integer next){
        try {
            bricksList = dataProvider.requestDataFromExternalService(query, next); //On error just return an empty list for now.
        } catch (MalformedURLException ex) {
            Logger.getLogger(OurBricksJPanel.class.getName()).log(Level.SEVERE, null, ex);
            bricksList = new OurBricksList();
        } catch (IOException ex) {
            Logger.getLogger(OurBricksJPanel.class.getName()).log(Level.SEVERE, null, ex);
            bricksList = new OurBricksList();
        }
        enableNavigation();
        listModel.clear();
        for (OurBrick brick : bricksList.getItems()) {
            listModel.addElement(brick);    
        }

    }

    private void searchFromOffset(Integer offset){
        System.out.println("The value of searchTextField.getText() is : " + searchTextField.getText());
        //TODO deal with http://ourbricks.com/api/search?q=truck&start=1&limit=5
        if (searchTextField.getText() == null || searchTextField.getText().equals(""))
            search(null, offset);
        else
            search(searchTextField.getText(), offset);
    }

    private void enableNavigation(){
        
        if (bricksList.getNext_start() != null){
            next.setEnabled(true);
        }
        else {
            next.setEnabled(false);
        }

        if (bricksList.getPrev_start() != null){
            previous.setEnabled(true);
        }
        else {
            previous.setEnabled(false);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        allModels = new javax.swing.JButton();
        jLabelSearch = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bricksJList = new javax.swing.JList();
        bricksJList.setCellRenderer(new OurBricksCellRenderer());
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setAutoscrolls(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));
        jPanel1.setToolTipText("Search");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        allModels.setText("All Models");
        allModels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allModelsActionPerformed(evt);
            }
        });

        jLabelSearch.setText("Search for Models:");

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        previous.setText("Previous");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addGap(73, 73, 73)
                .addComponent(previous)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(next)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(allModels)
                .addGap(126, 126, 126))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {next, previous});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabelSearch)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchButton)
                .addComponent(previous)
                .addComponent(next)
                .addComponent(allModels))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));
        jPanel2.setToolTipText("Results");

        bricksJList.setModel(listModel);
        jScrollPane1.setViewportView(bricksJList);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Data about the model \nchosen");
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        handleSearch();
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        handleSearch();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        searchFromOffset(bricksList.getPrev_start());
    }//GEN-LAST:event_previousActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        searchFromOffset(bricksList.getNext_start());
    }//GEN-LAST:event_nextActionPerformed

    private void allModelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allModelsActionPerformed
        searchTextField.setText("");
        search(null, null);
    }//GEN-LAST:event_allModelsActionPerformed

    private void handleSearch(){
        if ( searchTextField.getText() != null && !searchTextField.getText().equals("")) {
            search(searchTextField.getText(), null);
        }

    }

    private void importModel(String urlOfModel, String modelName){
        
        try {
            File fileToImport = dataProvider.fileToImport(urlOfModel, modelName);

            if (fileToImport != null){
                List<File> fileList = new ArrayList<File>();
                fileList.add(fileToImport);
                System.out.println("Trying to upload the model");
                FileListDataFlavorHandler.importFile(fileList, true, null);
            } else {
                //TODO provide feedback to the user that the file is not available
            }
        }
        catch (Exception e){
            //TODO HANDLE ME NOW!!!!!!!!!!!!!!
            //Malformed URL Exceptiopn and IOException
            //TODO provide feedback to the user that the file is not available
            Logger.getLogger(OurBricksJPanel.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allModels;
    private javax.swing.JList bricksJList;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

}
